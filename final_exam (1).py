# -*- coding: utf-8 -*-
"""FINAL EXAM

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PhjoLNsek095JpQQHjGZp-0tUh8IRh63
"""

# Commented out IPython magic to ensure Python compatibility.
#Import from module 8



# %matplotlib inline

import os
import io

# Core
import pandas as pd
import numpy as np

# Data
import json
from collections import defaultdict

# Visuals
import matplotlib
import matplotlib.pyplot as plt
from matplotlib.pyplot import imshow
import seaborn as sns


# Url
import urllib.parse

# Display Images
from PIL import Image, ImageFilter

# IPython display
from IPython.display import display

# Loading Zip Files
import zipfile

# Working with images
import cv2

# Progress Bar (for long processes)
from tqdm import tqdm

import pandas as pd

df = pd.read_excel('bitcoin5y.xlsx')

print(df.head())

print(df.isnull().sum())

print(df.info())

import matplotlib.pyplot as plt

df['Date'] = pd.to_datetime(df['Date'])

plt.figure(figsize=(10, 6))
plt.plot(df['Date'], df['Close'], label='Closing Price')
plt.title('Bitcoin Closing Price (Past 5 Years)')
plt.xlabel('Date')
plt.ylabel('Closing Price ($)')
plt.legend()
plt.show()

print(df.describe())

plt.figure(figsize=(10, 6))
plt.boxplot(df['Close'])
plt.title('Boxplot of Bitcoin Closing Price')
plt.ylabel('Closing Price ($)')
plt.show()

df = df.sort_values('Date')

train_size = int(len(df) * 0.8)
train_data = df[:train_size]
test_data = df[train_size:]

print(f"Training Data Size: {len(train_data)}")
print(f"Testing Data Size: {len(test_data)}")

import numpy as np
from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler(feature_range=(0, 1))

train_close = train_data['Close'].values.reshape(-1, 1)
test_close = test_data['Close'].values.reshape(-1, 1)

train_scaled = scaler.fit_transform(train_close)
test_scaled = scaler.transform(test_close)

def create_sequences(data, time_steps=60):
    x, y = [], []
    for i in range(time_steps, len(data)):
        x.append(data[i-time_steps:i, 0])
        y.append(data[i, 0])
    return np.array(x), np.array(y)

time_steps = 60
x_train, y_train = create_sequences(train_scaled, time_steps)
x_test, y_test = create_sequences(test_scaled, time_steps)

x_train = x_train.reshape(x_train.shape[0], x_train.shape[1], 1)
x_test = x_test.reshape(x_test.shape[0], x_test.shape[1], 1)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import SimpleRNN, Dense, Dropout

model = Sequential()

model.add(SimpleRNN(units=50, return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add(Dropout(0.2))

model.add(SimpleRNN(units=50, return_sequences=False))
model.add(Dropout(0.2))

model.add(Dense(units=1))

model.compile(optimizer='adam', loss='mean_squared_error')

history = model.fit(x_train, y_train, epochs=20, batch_size=32, validation_data=(x_test, y_test))

predicted_prices = model.predict(x_test)


predicted_prices = scaler.inverse_transform(predicted_prices)
y_test_actual = scaler.inverse_transform(y_test.reshape(-1, 1))


plt.figure(figsize=(10, 6))
plt.plot(test_data['Date'][time_steps:], y_test_actual, color='blue', label='Actual Prices')
plt.plot(test_data['Date'][time_steps:], predicted_prices, color='red', label='Predicted Prices')
plt.title('Model Alpha - Bitcoin Closing Price Prediction')
plt.xlabel('Date')
plt.ylabel('Closing Price ($)')
plt.legend()
plt.show()

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from tensorflow.keras.optimizers import Adam

model = Sequential()

model.add(LSTM(units=100, return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add(Dropout(0.3))

model.add(LSTM(units=100, return_sequences=False))
model.add(Dropout(0.3))

model.add(Dense(units=1, activation='linear'))

optimizer = Adam(learning_rate=0.001)
model.compile(optimizer=optimizer, loss='mean_squared_error')

model.fit(x_train, y_train, epochs=50, batch_size=64, validation_data=(x_test, y_test))

predicted_prices = model.predict(x_test)


predicted_prices = scaler.inverse_transform(predicted_prices)
y_test_actual = scaler.inverse_transform(y_test.reshape(-1, 1))


plt.figure(figsize=(10, 6))
plt.plot(test_data['Date'][time_steps:], y_test_actual, color='blue', label='Actual Prices')
plt.plot(test_data['Date'][time_steps:], predicted_prices, color='red', label='Predicted Prices')
plt.title('Model Beta - Bitcoin Closing Price Prediction')
plt.xlabel('Date')
plt.ylabel('Closing Price ($)')
plt.legend()
plt.show()

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from tensorflow.keras.optimizers import Adam

model2 = Sequential()

model2.add(LSTM(units=100, return_sequences=True, input_shape=(x_train.shape[1], 1)))
model2.add(Dropout(0.3))

model2.add(LSTM(units=100, return_sequences=False))
model2.add(Dropout(0.3))

model2.add(Dense(units=1, activation='linear'))

optimizer = Adam(learning_rate=0.001)
model2.compile(optimizer=optimizer, loss='mean_squared_error')

model2.fit(x_train, y_train, epochs=100, batch_size=64, validation_data=(x_test, y_test))

predicted_prices = model2.predict(x_test)


predicted_prices = scaler.inverse_transform(predicted_prices)
y_test_actual = scaler.inverse_transform(y_test.reshape(-1, 1))


plt.figure(figsize=(10, 6))
plt.plot(test_data['Date'][time_steps:], y_test_actual, color='blue', label='Actual Prices')
plt.plot(test_data['Date'][time_steps:], predicted_prices, color='red', label='Predicted Prices')
plt.title('Model Gamma - Bitcoin Closing Price Prediction')
plt.xlabel('Date')
plt.ylabel('Closing Price ($)')
plt.legend()
plt.show()

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from tensorflow.keras.optimizers import Adam

model = Sequential()

model.add(LSTM(units=100, return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add(Dropout(0.3))

model.add(LSTM(units=100, return_sequences=False))
model.add(Dropout(0.3))

model.add(Dense(units=1, activation='linear'))

optimizer = Adam(learning_rate=0.001)
model.compile(optimizer=optimizer, loss='mean_squared_error')

model.fit(x_train, y_train, epochs=100, batch_size=128, validation_data=(x_test, y_test))

predicted_prices = model.predict(x_test)


predicted_prices = scaler.inverse_transform(predicted_prices)
y_test_actual = scaler.inverse_transform(y_test.reshape(-1, 1))


plt.figure(figsize=(10, 6))
plt.plot(test_data['Date'][time_steps:], y_test_actual, color='blue', label='Actual Prices')
plt.plot(test_data['Date'][time_steps:], predicted_prices, color='red', label='Predicted Prices')
plt.title('Model Delta - Bitcoin Closing Price Prediction')
plt.xlabel('Date')
plt.ylabel('Closing Price ($)')
plt.legend()
plt.show()

udf = pd.read_excel('Updated.xlsx')


udf = udf.sort_values('Date')

train_size = int(len(udf) * 0.8)
train_data = udf[:train_size]
test_data = udf[train_size:]

print(f"Training Data Size: {len(train_data)}")
print(f"Testing Data Size: {len(test_data)}")

import numpy as np
from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler(feature_range=(0, 1))

train_close = train_data['Close'].values.reshape(-1, 1)
test_close = test_data['Close'].values.reshape(-1, 1)

train_scaled = scaler.fit_transform(train_close)
test_scaled = scaler.transform(test_close)

def create_sequences(data, time_steps=60):
    x, y = [], []
    for i in range(time_steps, len(data)):
        x.append(data[i-time_steps:i, 0])
        y.append(data[i, 0])
    return np.array(x), np.array(y)

time_steps = 60
x_train, y_train = create_sequences(train_scaled, time_steps)
x_test, y_test = create_sequences(test_scaled, time_steps)

x_train = x_train.reshape(x_train.shape[0], x_train.shape[1], 1)
x_test = x_test.reshape(x_test.shape[0], x_test.shape[1], 1)

predicted_prices = model2.predict(x_test)


predicted_prices = scaler.inverse_transform(predicted_prices)
y_test_actual = scaler.inverse_transform(y_test.reshape(-1, 1))


plt.figure(figsize=(10, 6))
plt.plot(test_data['Date'][time_steps:], y_test_actual, color='blue', label='Actual Prices')
plt.plot(test_data['Date'][time_steps:], predicted_prices, color='red', label='Predicted Prices')
plt.axhline(y=100000, color='green', linestyle='--', label='Constant Line at 100,000')
plt.title('Updated Model Gamma - Closing Price Prediction')
plt.xlabel('Date')
plt.ylabel('Closing Price ($)')
plt.legend()
plt.show()

import pandas as pd

last_7_actual = y_test_actual[-7:]
last_7_predicted = predicted_prices[-7:]
last_7_dates = test_data['Date'][-7:]

df_last_7 = pd.DataFrame({
    'Date': last_7_dates,
    'Actual Close Price ($)': last_7_actual.flatten(),
    'Predicted Close Price ($)': last_7_predicted.flatten()
})

print(df_last_7)